(function() {
  var MidiMsgType, byStatus, name, type, types;

  module.exports.byStatus = byStatus = [];

  module.exports.types = types = {};

  MidiMsgType = (function() {
    function MidiMsgType(name, size, hasChannel, status, isFourteenBit) {
      this.name = name;
      this.size = size;
      this.hasChannel = hasChannel;
      this.status = status;
      this.isFourteenBit = isFourteenBit != null ? isFourteenBit : false;
      byStatus[status] = this;
      types[name] = this;
    }

    MidiMsgType.prototype.toArray = function(one, two, three) {
      if (this.isFourteenBit) {
        one = one || 8192;
        return [this.status + (two || 0), one % 128, Math.floor(one / 128)];
      }
      if (this.size === 2) {
        return [this.status + (three || 0), one, two];
      }
      if (this.size === 1) {
        if (this.hasChannel) {
          return [this.status + (two || 0), one];
        } else {
          return [this.status, one];
        }
      }
      if (this.size === 0) {
        return [this.status];
      }
    };

    return MidiMsgType;

  })();

  new MidiMsgType('noteOn', 2, true, 0x90);

  new MidiMsgType('noteOff', 2, true, 0x80);

  new MidiMsgType('pitchBend', 2, true, 0xE0, true);

  new MidiMsgType('cc', 2, true, 0xB0);

  new MidiMsgType('channelPressure', 1, true, 0xD0);

  new MidiMsgType('clock', 0, false, 0xF8);

  new MidiMsgType('start', 0, false, 0xFA);

  new MidiMsgType('stop', 0, false, 0xFC);

  new MidiMsgType('continue', 0, false, 0xfB);

  new MidiMsgType('songPosition', 2, false, 0xF2, true);

  for (name in types) {
    type = types[name];
    module.exports[name] = type.toArray.bind(type);
  }

}).call(this);
