(function() {
  var MidiParser, byStatus, events, midiTypes,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  events = require('events');

  midiTypes = require('./midi-types');

  byStatus = midiTypes.byStatus;

  module.exports = midiTypes;

  MidiParser = (function(_super) {
    __extends(MidiParser, _super);

    function MidiParser() {
      this._midiMsgType = void 0;
      this._sysex = false;
      this._midi = {
        size: void 0,
        nibble1: void 0,
        nibble2: void 0,
        status: void 0,
        firstByte: void 0
      };
    }

    MidiParser.prototype.parseByte = function(byte) {
      if (byte & 128) {
        return this._parseStatus(byte);
      } else if (this._midi.firstByte === void 0) {
        return this._parseFirst(byte);
      } else {
        return this._parseSecond(byte);
      }
    };

    MidiParser.prototype.parseArray = function(input) {
      var byte, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = input.length; _i < _len; _i++) {
        byte = input[_i];
        _results.push(this.parseByte(byte));
      }
      return _results;
    };

    MidiParser.prototype.parseBytes = function() {
      var byte, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = arguments.length; _i < _len; _i++) {
        byte = arguments[_i];
        _results.push(this.parseByte(byte));
      }
      return _results;
    };

    MidiParser.prototype._parseStatus = function(byte) {
      this._midi.status = byte;
      this._midi.nibble1 = byte & 0xF0;
      this._midi.nibble2 = byte & 0x0F;
      this._midiMsgType = byStatus[this._midi.nibble1];
      if (!this._midiMsgType) {
        this._midiMsgType = byStatus[byte];
      }
      this._midi.firstByte = void 0;
      if (!this._midiMsgType) {
        this.emit('mysteryStatusByte', byte);
        return;
      }
      if (this._midiMsgType.size === 0) {
        return this.emit(this._midiMsgType.name);
      }
    };

    MidiParser.prototype._parseFirst = function(byte) {
      if (!this._midiMsgType) {
        this.emit('mysteryDataByte', byte);
        return;
      }
      if (this._midiMsgType.size === 1) {
        if (this._midiMsgType.hasChannel) {
          this.emit(this._midiMsgType.name, byte, this._midi.nibble2);
        }
        return this._midi.status = void 0;
      } else {
        return this._midi.firstByte = byte;
      }
    };

    MidiParser.prototype._parseSecond = function(byte) {
      if (this._midiMsgType.isFourteenBit) {
        this.emit(this._midiMsgType.name, this._midi.firstByte + (byte * 128), this._midiMsgType.hasChannel ? this._midi.nibble2 : void 0);
      } else {
        this.emit(this._midiMsgType.name, this._midi.firstByte, byte, this._midi.nibble2);
      }
      this._midi.status = void 0;
      return this._midi.firstByte = void 0;
    };

    return MidiParser;

  })(events.EventEmitter);

  module.exports.MidiParser = MidiParser;

}).call(this);
